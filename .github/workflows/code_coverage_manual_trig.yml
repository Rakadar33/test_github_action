name: code coverage

on:
  workflow_dispatch:



jobs:
  #------------------------------------------
  build_and_test:
  #------------------------------------------
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        include:
        - os: windows-latest
          pio_lib_path: D:\a\Luos

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Set up Node
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        npm install -g clang-format
      
    - name: Check out Luos repository
      uses: actions/checkout@v2

    - name: Create env repo
      shell: bash
      run: |
        git clone https://github.com/Rakadar33/Luos.git
        cd Luos
        #git checkout mem_alloc_UT

    - name: Run PlatformIO Unit tests
      env:
        PLATFORMIO_LIB_EXTRA_DIRS: ${{ matrix.pio_lib_path }}
      run: |
        cd Luos
        $curDir = Get-Location
        $env:PLATFORMIO_LIB_EXTRA_DIRS = Split-Path -Path $curDir -Parent
        # platformio run -t clean;platformio test -e native -v --filter "*mem*" -i CodeCoverage
        platformio run -t clean;platformio test -i CodeCoverage

    - name: Zip directory
      run: |
        Compress-Archive -Path .\Luos\* -DestinationPath luos.Zip

    - uses: actions/upload-artifact@v1
      with:
        name: result
        path: luos.Zip

    #- uses: actions/upload-artifact@v2
    #  with:
    #    name: test-results
    #    path: $WINDOWS_WORKSPACE\Luos

    #- uses: actions/cache@v2
    #  id: test-results
    #  with:
    #    path: $WINDOWS_WORKSPACE/*
    #    #key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-result
    #    #key: ${{ runner.os }}-${{ (Get-Date).ToFileTime() }}-result
    #    key: ${{ runner.os }}-${{ steps.date.outputs.date }}-result
        
  #------------------------------------------
  coverage:
  #------------------------------------------
    name: Code Coverage
    needs: build_and_test

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/download-artifact@v1
      with:
         name: result
      
    - name: Go to results
      run: |
        ls
        cd ./result        
        ls
        Expand-Archive -LiteralPath luos.Zip -DestinationPath .
        ls
        cd luos
        ls

    #- uses: actions/cache@v2
    #  id: test-results
    #  with:
    #   path: $WINDOWS_WORKSPACE/*
    #    key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-result

    #- uses: actions/download-artifact@v2
    #  with:
    #    name: test-results

    # A REMETTRE
    #- name: Install Windows dependencies
    #  if: ${{ runner.os == 'Windows' }}
    #  run: |
    #    choco install strawberryperl
    #    choco install golang
    #    choco install lcov

    - name: Coverage generation
      run: |
        # TODO : rendre ind√©pendant du nombre de files (boucle for)
        #
        Get-Item -Path Env:*
        ls
        mkdir .\test\CodeCoverage
        $path=split-path (Get-Command chocolatey).Path

        # ----- $command_gcov=     (Get-Command gcov.exe).Path + " .\.pio\build\native\test\memory_allocator\unit_test_mem_alloc.gcno .\.pio\build\native\test\memory_allocator_static\unit_test_mem_alloc_static.gcno .\.pio\build\native\test\memory_allocator_tx\unit_test_mem_alloc_tx.gcno"
        $command_gcov=     (Get-Command gcov.exe).Path + " .\.pio\build\native\test\memory_allocator\unit_test_mem_alloc.gcda .\.pio\build\native\test\memory_allocator_static\unit_test_mem_alloc_static.gcda .\.pio\build\native\test\memory_allocator_tx\unit_test_mem_alloc_tx.gcda"
        $command_geninfo_1= (Get-Command perl.exe).Path + " $path\..\lib\lcov\tools\bin\geninfo .\.pio\build\native\test\memory_allocator_static\ -o .\memory_allocator_static.info"
        $command_geninfo_2=(Get-Command perl.exe).Path + " $path\..\lib\lcov\tools\bin\geninfo .\.pio\build\native\test\memory_allocator\ -o .\memory_allocator.info"
        $command_geninfo_3=(Get-Command perl.exe).Path + " $path\..\lib\lcov\tools\bin\geninfo .\.pio\build\native\test\memory_allocator_tx\ -o .\memory_allocator_tx.info"
        $command_lcov=     (Get-Command perl.exe).Path + " $path\..\lib\lcov\tools\bin\lcov --add-tracefile memory_allocator.info -a memory_allocator_static.info -a memory_allocator_tx.info -o merged.info"
        # -------- $command_genhtml=  (Get-Command perl.exe).Path + " $path\..\lib\lcov\tools\bin\genhtml merged.info -o .\test\CodeCoverage"
        $command_genhtml=  (Get-Command perl.exe).Path + " $path\..\lib\lcov\tools\bin\genhtml merged.info -o $WINDOWS_WORKSPACE\test\CodeCoverage\"
        Invoke-Expression $command_gcov
        Invoke-Expression $command_geninfo_1
        Invoke-Expression $command_geninfo_2
        Invoke-Expression $command_geninfo_3
        Invoke-Expression $command_lcov
        ls
        Invoke-Expression $command_genhtml
        ls .\test\CodeCoverage

    #- name: zip
    #  run: Compress-Archive -Path .\test\CodeCoverage\* -DestinationPath .\test\code_coverage.Zip        

    - name: Publish artifact on Readme
      run: |
        ls
      #uses: zgosalvez/github-actions-report-lcov@49af65b0586c274a625a41a2dc8aaaae7d00568b
      #with:
      #  coverage-files: $WINDOWS_WORKSPACE\test\CodeCoverage\merged.info
      #  minimum-coverage: 3
      #  artifact-name: code-coverage-report
      #  github-token: ${{ secrets.GITHUB_TOKEN }}
